#include "road.h"
#include <algorithm>
#include "player_enum.h"
#include "player_state_enum.h"

vector<int> road_x_pos = {410,476,542,608,674,740,377,509,641,773,344,410,476,542,608,674,740,806,377-66,509-66,641-66,773-66,773+66,344-66,
                         344,410,476,542,608,674,740,806,806+66,377-132,377,509,641,773,773+132,344-66,344,410,476,542,608,674,740,806,806+66,
                         377-66,509-66,641-66,773-66,773+66,344,410,476,542,608,674,740,806,377,509,641,773,410,476,542,608,674,740};
vector<int> road_y_pos = {110,110,110,110,110,110,167,167,167,167,225,225,225,225,225,225,225,225,282,282,282,282,282,340,340,340,340,340,340,
                         340,340,340,340,397,397,397,397,397,397,454,454,454,454,454,454,454,454,454,454,512,512,512,512,512,569,569,569,569,569,569
                         ,569,569,627,627,627,627,684,684,684,684,684,684};

vector<int> road_angle = {60,300,60,300,60,300,0,0,0,0,60,300,60,300,60,300,60,300,0,0,0,0,0,60,300,60,300,60,300,60,300,60,300,0,0,0,0,0,0
                         ,300,60,300,60,300,60,300,60,300,60,0,0,0,0,0,300,60,300,60,300,60,300,60,0,0,0,0,300,60,300,60,300,60};

vector<vector<int>> endpointPair={{3,0},{0,4},{4,1},{1,5},{5,2},{2,6},{3,7},{4,8},{5,9},{6,10},{11,7},{7,12},{12,8},{8,13},{13,9},{9,14}
                                  ,{14,10},{10,15},{11,16},{12,17},{13,18},{14,19},{15,20},{21,16},{16,22},{22,17},{17,23},{23, 18},{18,24}
                                  ,{24,19},{19,25},{25,20},{20,26},{21,27},{22,28},{23,29},{24,30},{25,31},{26,32},{27,33},{33,28},{28,34}
                                  ,{34,29},{29,35},{35,30},{30,36},{36,31},{31,37},{37,32},{33,38},{34,39},{35,40},{36,41},{37,42},{38,43}
                                  ,{43,39},{39,44},{44,40},{40,45},{45,41},{41,46},{46,42},{43,47},{44,48},{45,49},{46,50},{47,51},{51,48}
                                  ,{48,52},{52,49},{49,53},{53,50}};





Road::Road(int i)
    :indexForRoad(i),indexPointEnd1(endpointPair[i][0]),indexPointEnd2(endpointPair[i][1])
{


   ownedPlayer = player_type::no_player;
    built = false;

}

int Road::get_index_for_road(void) const
{
    return indexForRoad;
}

player_type Road::get_owned_player(void)
{
    return ownedPlayer;
}

vector<int> Road::get_endpoints(void) const
{
    vector<int> a{indexPointEnd1, indexPointEnd2};
    return a;
}
void Road::set_owned_player(player_type occupier)
{
    ownedPlayer = occupier;
}
bool Road::get_built(void) const
{
    return built;
}
void Road::set_built(void)
{
    built = true;
}

